version: '3.8'

services:
  nginx:
    container_name: ds_nginx
    image: nginx:alpine
    ports:
      - "8099:80"
      - "4439:443"
    volumes:
      - ./app:/var/www/html
      - ./docker/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - ds_network

  php:
    container_name: ds_php
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    volumes:
      - ./app:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./symfony/var/log:/var/www/html/var/log
    networks:
      - ds_network
    depends_on:
      - mysql
    environment:
      - XDEBUG_MODE=develop,debug
      - XDEBUG_CONFIG=client_host=host.docker.internal
    extra_hosts:
        - "host.docker.internal:host-gateway"

  mysql:
    container_name: ds_mysql
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: symfony_db
      MYSQL_USER: symfony_user
      MYSQL_PASSWORD: symfony_pass
      MYSQL_INITDB_SKIP_TZINFO: 1  # Добавляем эту строку
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --innodb-use-native-aio=0
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf  # Опционально
    ports:
      - "3399:3306"
    networks:
      - ds_network
    restart: unless-stopped  # Добавляем политику перезапуска  

  redis:
    container_name: ds_redis
    image: redis:alpine
    ports:
      - "6399:6379"
    networks:
      - ds_network

  cron:
    container_name: ds_cron
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    volumes:
      - ./app:/var/www/html
    command: |
      sh -c "
      cd /var/www/html &&
      echo '*/5 * * * * /usr/local/bin/php /var/www/html/bin/console app:cron-task' > /etc/crontabs &&
      crond -f"
    networks:
      - ds_network
    depends_on:
      - php
      - mysql

volumes:
  mysql_data:

networks:
  ds_network:
    driver: bridge